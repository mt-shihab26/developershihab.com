---
import { meta } from "~/lib/meta";

interface Props {
    title?: string;
    name?: string;
    pathname?: string;
    description?: string;
}

const props = Astro.props as Props;

const title = props.title ? props.title : props.name ? `${props.name} - ${meta.name}` : meta.name;
const description = props.description;
const pathname = props.pathname || "";

const canonical = meta.url + pathname;

const openGraph = {
    url: meta.url + pathname,
    siteName: meta.name,
    images: [
        {
            url: `https://og.brian.dev/api/og?title=${title}&desc=${description}`,
            width: 1200,
            height: 600,
            alt: "Og Image Alt",
            type: "image/jpeg"
        }
    ]
};
---

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />

    <title>{title}</title>

    {description && <meta name="description" content={description} />}
    {canonical && <link rel="canonical" href={canonical} />}

    {
        openGraph && (
            <>
                <meta property="og:url" content={openGraph.url} />
                <meta property="og:site_name" content={openGraph.siteName} />
                {openGraph.images?.map((image) => (
                    <>
                        <meta property="og:image" content={image.url} />
                        <meta property="og:image:width" content={image.width.toString()} />
                        <meta property="og:image:height" content={image.height.toString()} />
                        <meta property="og:image:alt" content={image.alt} />
                        <meta property="og:image:type" content={image.type} />
                    </>
                ))}
            </>
        )
    }
</head>
