---
import { siteConfig } from '@/config/site';

import poems from '@/lib/poems';

import Layout from '@/components/Layout.astro';
import Poem from '@/components/screens/poems/Poem.astro';

const poemsValue = await poems();

const createPoemId = (name: string) => name.toLowerCase().replace(/[^a-z0-9]/g, '-');
---

<Layout
	meta={{
		title: `Poetry Collection - ${siteConfig.author}`,
		description: 'Welcome to my collection of poems and verses.'
	}}
>
	<div
		class="flex min-h-screen w-screen max-w-[60rem] flex-col items-center px-6 pb-10 pt-7 font-satoshi text-[0.92rem] leading-relaxed selection:bg-red-500 selection:text-white sm:px-10 lg:px-10"
	>
		<div class="w-full">
			<a
				href="/"
				class="inline-flex items-center gap-x-1 rounded-lg border border-border bg-primary-foreground px-2 py-1 text-sm transition-all hover:bg-input"
			>
				<svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 24 24">
					<path
						fill="currentColor"
						d="m6.921 12.5l5.792 5.792L12 19l-7-7l7-7l.713.708L6.921 11.5H19v1z"></path>
				</svg>
				<p>Back</p>
			</a>

			<div class="mt-5">
				<h1 class="mb-8 text-2xl font-bold">Poetry Collection</h1>

				<div class="relative flex gap-6">
					<!-- Fixed Sidebar -->
					<div class="sticky top-4 h-[calc(100vh-8rem)] w-64 overflow-hidden">
						<div class="h-full rounded-xl border bg-card text-card-foreground shadow">
							<div class="h-full overflow-y-auto p-4">
								<nav class="space-y-1">
									{
										poemsValue.map((poem) => (
											<a
												href={`#${createPoemId(poem.data.name)}`}
												class="block rounded-md px-3 py-2 text-sm text-muted-foreground transition-colors hover:bg-accent hover:text-accent-foreground"
											>
												{poem.data.name}
											</a>
										))
									}
								</nav>
							</div>
						</div>
					</div>

					<!-- Scrollable Poems -->
					<div class="flex-1 space-y-6">
						{poemsValue.map((poem) => <Poem poem={poem} id={createPoemId(poem.data.name)} />)}
					</div>
				</div>
			</div>
		</div>
	</div>
</Layout>

<script>
	// Active link tracking with IntersectionObserver
	const observerOptions = {
		root: null,
		rootMargin: '-20% 0px -80% 0px', // Adjusted for better accuracy
		threshold: 0
	};

	const observer = new IntersectionObserver((entries) => {
		entries.forEach((entry) => {
			if (entry.isIntersecting) {
				const id = entry.target.id;
				document.querySelectorAll('nav a').forEach((link) => {
					if (link.getAttribute('href') === `#${id}`) {
						link.classList.add('bg-accent', 'text-accent-foreground', 'font-medium');
					} else {
						link.classList.remove('bg-accent', 'text-accent-foreground', 'font-medium');
					}
				});
			}
		});
	}, observerOptions);

	// Observe all poem sections
	document.querySelectorAll('article[id]').forEach((section) => {
		observer.observe(section);
	});

	// Smooth scroll behavior
	document.querySelectorAll('nav a').forEach((link) => {
		link.addEventListener('click', (e) => {
			e.preventDefault();
			const href = link.getAttribute('href');
			if (!href) return;

			const target = document.querySelector(href);
			if (!target) return;

			target.scrollIntoView({
				behavior: 'smooth',
				block: 'start'
			});
		});
	});
</script>
