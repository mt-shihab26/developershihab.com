---
import type { GetStaticPaths, InferGetStaticPropsType } from 'astro';

import Back from '@/components/elements/Back';
import Layout from '@/components/screens/layout/Layout.astro';
import Scroll from '@/components/elements/Scroll';
import TableOfContents from '@/components/screens/blogs/TableOfContents.astro';
import FormattedDate from '@/components/elements/FormattedDate';

import { getBlogs } from '@/utils/blogs';
import { suffixTitle } from '@/config/site';

export const getStaticPaths = (async () => {
	return (await getBlogs()).map((entry) => ({
		params: { slug: entry.slug },
		props: { entry }
	}));
}) satisfies GetStaticPaths;

type Props = InferGetStaticPropsType<typeof getStaticPaths>;

const { entry: blog } = Astro.props;

const {
	data: { description, ogimage, date, title, cover, draft, tags },
	slug
} = blog;

const { Content, headings, remarkPluginFrontmatter } = await blog.render();

const dateTimeOptions: Intl.DateTimeFormatOptions = {
	month: 'long'
};
---

<Layout
	title={suffixTitle(title)}
	ogImage={ogimage || `/og-image/${slug}.png`}
	description={description}
	articleDate={date.updated?.toISOString() ?? date.publish.toISOString()}
>
	<div class="w-full">
		<Back href="/blogs" client:load />
		<div class="mt-8 gap-x-10 lg:flex lg:items-start">
			{!!headings.length && <TableOfContents headings={headings} />}
			<article class="flex-grow break-words" data-pagefind-body>
				<div id="blog-hero">
					{
						cover && (
							<div class="aspect-h-9 aspect-w-16 mb-6">
								<img
									alt={cover.alt}
									class="rounded-2xl object-cover"
									fetchpriority="high"
									loading="eager"
									src={cover.src.src}
								/>
							</div>
						)
					}
					{draft ? <span class="text-red-500">(Draft)</span> : null}
					<div class="flex flex-wrap items-center gap-x-3 gap-y-2">
						<p class="text-xs">
							<FormattedDate date={date.publish} dateTimeOptions={dateTimeOptions} /> /{' '}
							{remarkPluginFrontmatter.minutesRead}
						</p>
					</div>
					<h1 class="mt-2 text-3xl font-medium">
						{title}
					</h1>
					<p class="mt-2 italic text-muted-foreground">
						{description}
					</p>
					{
						!!tags?.length && (
							<div class="mt-3 flex flex-row items-center gap-x-1 text-sm lg:text-base">
								<svg
									aria-hidden="true"
									class="me-1 inline-block h-6 w-6"
									fill="none"
									focusable="false"
									stroke="currentColor"
									stroke-linecap="round"
									stroke-linejoin="round"
									stroke-width="1.5"
									viewBox="0 0 24 24"
									xmlns="http://www.w3.org/2000/svg"
								>
									<path d="M0 0h24v24H0z" fill="none" stroke="none" />
									<path d="M7.859 6h-2.834a2.025 2.025 0 0 0 -2.025 2.025v2.834c0 .537 .213 1.052 .593 1.432l6.116 6.116a2.025 2.025 0 0 0 2.864 0l2.834 -2.834a2.025 2.025 0 0 0 0 -2.864l-6.117 -6.116a2.025 2.025 0 0 0 -1.431 -.593z" />
									<path d="M17.573 18.407l2.834 -2.834a2.025 2.025 0 0 0 0 -2.864l-7.117 -7.116" />
									<path d="M6 9h-.01" />
								</svg>
								{tags.map((tag: any, i: any) => (
									<div>
										<a
											aria-label={`View more blogs with the tag ${tag}`}
											class="inline-block hover:underline"
											data-pagefind-filter="tag"
											href={`/tags/${tag}/`}
										>
											#{i < tags.length - 1 ? `${tag}, ` : tag}
										</a>
									</div>
								))}
							</div>
						)
					}

					{
						date.updated && (
							<p class="mt-6 text-base">
								Last Updated:
								<FormattedDate
									className="ms-1"
									date={date.updated}
									dateTimeOptions={dateTimeOptions}
								/>
							</p>
						)
					}
				</div>
				<div
					class="prose prose-base prose-zinc mt-12 text-muted-foreground dark:prose-invert prose-headings:font-medium prose-headings:text-foreground prose-headings:before:absolute prose-headings:before:-ms-4 prose-th:before:content-none"
				>
					<Content />
				</div>
			</article>
		</div>
		<Scroll target="blog-hero" />
	</div>
</Layout>
